
BEGIN(PASS)
    SET(ITERATION ONCE)

    SET(ATTRIBUTE POSITION "vertex_position")
    SET(ATTRIBUTE DIFFUSE "vertex_diffuse")

    SET(UNIFORM MODELVIEW_PROJECTION_MATRIX "modelview_projection")
    SET(UNIFORM LIGHT_GLOBAL_AMBIENT "global_ambient")
    SET(UNIFORM MATERIAL_AMBIENT "material_ambient")
    SET(UNIFORM POINT_SIZE "point_size")

    BEGIN_DATA(VERTEX)
        #version 120
        attribute vec3 vertex_position;
        attribute vec4 vertex_diffuse;

        uniform mat4 modelview_projection;
        uniform float point_size;

        varying vec4 frag_diffuse;

        void main() {
            frag_diffuse = vertex_diffuse;

            gl_Position = (modelview_projection * vec4(vertex_position, 1.0));
            gl_PointSize = point_size;
        }
    END_DATA(VERTEX)

    BEGIN_DATA(FRAGMENT)
        #version 120

        uniform vec4 global_ambient;
        uniform vec4 material_ambient;

        varying vec4 frag_diffuse;

        void main() {
            gl_FragColor = frag_diffuse * global_ambient * material_ambient;
        }
    END_DATA(FRAGMENT)
END(PASS)
BEGIN(PASS)
    SET(ITERATION ONCE_PER_LIGHT)
    SET(MAX_ITERATIONS 8)

    SET(ATTRIBUTE POSITION "vertex_position")
    SET(ATTRIBUTE NORMAL "vertex_normal")

    SET(UNIFORM VIEW_MATRIX "view")
    SET(UNIFORM MODELVIEW_MATRIX "modelview")
    SET(UNIFORM MODELVIEW_PROJECTION_MATRIX "modelview_projection")
    SET(UNIFORM NORMAL_MATRIX "normal_matrix")

    SET(UNIFORM LIGHT_POSITION "light_position")
    SET(UNIFORM LIGHT_DIFFUSE "light_diffuse")
    SET(UNIFORM LIGHT_SPECULAR "light_specular")

    SET(UNIFORM MATERIAL_SHININESS "material_shininess")
    SET(UNIFORM MATERIAL_DIFFUSE "material_diffuse")
    SET(UNIFORM MATERIAL_SPECULAR "material_specular")

    SET(UNIFORM LIGHT_CONSTANT_ATTENUATION "constant_attenuation")
    SET(UNIFORM LIGHT_LINEAR_ATTENUATION "linear_attenuation")
    SET(UNIFORM LIGHT_QUADRATIC_ATTENUATION "quadratic_attenuation")

    SET(FLAG BLEND ADD)

    BEGIN_DATA(VERTEX)
        #version 120
        attribute vec3 vertex_position;
        attribute vec3 vertex_normal;

        uniform mat4 modelview;
        uniform mat4 modelview_projection;
        uniform mat4 view;
        uniform mat3 normal_matrix;
        uniform vec4 light_position;

        varying vec4 vertex_position_eye;
        varying vec4 vertex_normal_eye;
        varying vec4 light_position_eye;

        void main() {
            vertex_normal_eye = vec4(normalize(normal_matrix * vertex_normal), 0); //Calculate the normal
            vertex_position_eye = (modelview * vec4(vertex_position, 1.0));
            light_position_eye = (view * light_position);

            gl_Position = (modelview_projection * vec4(vertex_position, 1.0));
        }
    END_DATA(VERTEX)
    BEGIN_DATA(FRAGMENT)
        #version 120
        uniform vec4 light_diffuse;
        uniform vec4 light_specular;

        uniform vec4 material_diffuse;
        uniform vec4 material_specular;
        uniform float material_shininess;

        uniform float constant_attenuation;
        uniform float linear_attenuation;
        uniform float quadratic_attenuation;

        varying vec4 vertex_position_eye;
        varying vec4 vertex_normal_eye;
        varying vec4 light_position_eye;

        void main() {
            vec4 light_dir = light_position_eye - (vertex_position_eye * vec4(light_position_eye.w));
            vec4 n_eye = normalize(vertex_normal_eye);
            vec4 s_eye = normalize(light_dir);
            vec4 v_eye = normalize(-vertex_position_eye);
            vec4 h_eye = v_eye + s_eye;

            vec4 color = vec4(0);

            float intensity = max(dot(s_eye, n_eye), 0.0);

            if(intensity > 0.0) {
                float d = length(light_dir);
                float attenuation = 1.0;

                if(light_position_eye.w > 0.0) {
                    attenuation = 1.0 / (
                        constant_attenuation +
                        linear_attenuation * d +
                        quadratic_attenuation * d * d
                    );
                }

                color += attenuation * (light_diffuse * material_diffuse * intensity);
                float spec = max(dot(h_eye, n_eye), 0.0);
                color += attenuation * (light_specular * material_specular) * pow(spec, material_shininess);
            }

            gl_FragColor = color;
        }

    END_DATA(FRAGMENT)
END(PASS)
